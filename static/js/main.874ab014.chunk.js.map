{"version":3,"sources":["logo.svg","components/Tasks.js","components/Notes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","colors","Tasks","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todoName","table","tableStr","qrenabled","searchStatus","category","categories","onAddTodoForm","event","preventDefault","onAddTodo","_this$state","push","status","name","date","Date","now","setState","saveTable","onRemoveTodo","tableNew","filter","x","onUpdateTodo","index","findIndex","JSON","stringify","localStorage","setItem","filterTasks","onAddCategory","_this$state2","color","length","parse","getItem","handleChange","bind","assertThisInitialized","defineProperty","target","value","_this2","_this$state3","react_default","a","createElement","Progress","total","success","active","progress","Header","style","cursor","onClick","autoComplete","onSubmit","Input","onChange","icon","Icon","inverted","circular","link","fluid","placeholder","Table","celled","Body","sort","y","map","_ref","Tasks_TableRow","key","Component","TableStatuses","1","2","TableRow","_ref2","Row","Cell","collapsing","Label","as","basic","title","moment","fromNow","format","replace","Notes","Form","TextArea","Button","Notes_TableRow","App","page","onPageChange","className","Menu","fixed","Container","Item","header","Image","size","src","logo","marginRight","text","marginTop","flex","Tasks_Tasks","Notes_Notes","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.874ab014.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport {\r\n  Header,\r\n  Input,\r\n  Icon,\r\n  Table,\r\n  Label,\r\n  Progress\r\n} from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nconst colors = [\r\n  'red',\r\n  'orange',\r\n  'olive',\r\n  'green',\r\n  'teal',\r\n  'violet',\r\n  'purple',\r\n  'pink',\r\n  'brown',\r\n  'grey',\r\n  'black',\r\n]\r\n\r\nexport default class Tasks extends Component {\r\n  state = {\r\n    todoName: \"\",\r\n    table: [],\r\n    tableStr: \"\",\r\n    qrenabled: false,\r\n    searchStatus: 1,\r\n    category: \"\",\r\n    categories: []\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let table = JSON.parse(localStorage.getItem(\"table\"));\r\n\r\n    if (table) this.state.table = table;\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onRemoveTodo = this.onRemoveTodo.bind(this);\r\n    this.onUpdateTodo = this.onUpdateTodo.bind(this);\r\n  }\r\n  onAddTodoForm = event => {\r\n    event.preventDefault();\r\n    this.onAddTodo();\r\n  };\r\n  onAddTodo = () => {\r\n    const { todoName, table } = this.state;\r\n    if (todoName) {\r\n      table.push({ status: 1, name: todoName, date: Date.now() });\r\n      this.setState({ todoName: \"\" });\r\n      this.saveTable(table);\r\n    }\r\n  };\r\n  onRemoveTodo = date => {\r\n    const { table } = this.state;\r\n    let tableNew = table.filter(x => x.date !== date);\r\n    this.saveTable(tableNew);\r\n  };\r\n  onUpdateTodo = date => {\r\n    const { table } = this.state;\r\n\r\n    let index = table.findIndex(x => x.date === date);\r\n    if (table[index].status === 1) table[index].status = 2;\r\n    else table[index].status = 1;\r\n\r\n    this.saveTable(table);\r\n  };\r\n  saveTable = table => {\r\n    const tableStr = JSON.stringify(table);\r\n    this.setState({ table, tableStr });\r\n    localStorage.setItem(\"table\", tableStr);\r\n  };\r\n\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n\r\n  filterTasks = (searchStatus) => {\r\n    this.setState({ searchStatus })\r\n  }\r\n\r\n  onAddCategory = event => {\r\n    \r\n    event.preventDefault();\r\n    \r\n    var { categories, category } = this.state\r\n\r\n    categories.push({ name: category, color: colors[categories.length % colors.length] })\r\n\r\n    this.setState({ categories })\r\n  }\r\n\r\n  render() {\r\n    const { category, todoName, table, searchStatus,categories } = this.state;\r\n    return (\r\n      <div>\r\n        <Progress\r\n          total={table.length}\r\n          value={table.filter(x => x.status === 2).length}\r\n          success active progress=\"ratio\" />\r\n        <Header><span style={{ color: searchStatus === 1 ? 'black' : '#eee', cursor: 'pointer' }}\r\n          onClick={() => this.filterTasks(1)}>Tasks ({table.filter(x => x.status === 1).length}) </span>\r\n          <span style={{ color: searchStatus === 2 ? 'black' : '#eee', cursor: 'pointer' }}\r\n            onClick={() => this.filterTasks(2)} > Completed Task ({table.filter(x => x.status === 2).length})</span></Header>\r\n        <form autoComplete=\"off\" onSubmit={this.onAddTodoForm}>\r\n          <Input\r\n            value={todoName}\r\n            name=\"todoName\"\r\n            onChange={this.handleChange}\r\n            icon={\r\n              <Icon\r\n                onClick={() => this.onAddTodo()}\r\n                name=\"add\"\r\n                inverted\r\n                circular\r\n                link\r\n              />\r\n            }\r\n            fluid\r\n            placeholder=\"Todo Name...\"\r\n          />\r\n        </form>\r\n        {/* <form autoComplete=\"off\" style={{ marginTop: 10 }} onSubmit={this.onAddCategory}>\r\n          <Input\r\n            label='Category'\r\n            placeholder='Category Name' value={category}\r\n            onChange={this.handleChange}\r\n            name=\"category\" />\r\n        </form>\r\n        {categories.map(category => <Label\r\n          as=\"a\"\r\n          basic\r\n          color={category.color}\r\n        >\r\n          {category.name}\r\n        </Label>)} */}\r\n        <Table celled>\r\n          <Table.Body>\r\n            {table.filter(x => x.status === searchStatus).sort((x, y) => y.date - x.date).map(({ name, date, status }) => (\r\n              <TableRow\r\n                key={\"row_\" + date}\r\n                name={name}\r\n                date={date}\r\n                status={status}\r\n                onUpdateTodo={this.onUpdateTodo}\r\n                onRemoveTodo={this.onRemoveTodo}\r\n              />\r\n            ))}\r\n          </Table.Body>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst TableStatuses = {\r\n  1: { name: \"Added\", color: \"yellow\" },\r\n  2: { name: \"Completed\", color: \"blue\" }\r\n};\r\n\r\nconst TableRow = ({ name, date, status, onRemoveTodo, onUpdateTodo }) => (\r\n  <Table.Row>\r\n    <Table.Cell collapsing>\r\n      <Label\r\n        as=\"a\"\r\n        basic\r\n        color={TableStatuses[status].color}\r\n        onClick={() => onUpdateTodo(date)}\r\n      >\r\n        {TableStatuses[status].name}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell>{name}</Table.Cell>\r\n    <Table.Cell title={moment(date).fromNow()} collapsing>\r\n      <Label color=\"violet\">\r\n        {moment(date)\r\n          .format(\"DD-MM-YYYY HH:mm\")\r\n          .replace(moment().format(\"DD-MM-YYYY \"), \"\")}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell collapsing>\r\n      <Icon\r\n        onClick={() => onRemoveTodo(date)}\r\n        name=\"remove\"\r\n        inverted\r\n        circular\r\n        link\r\n      />\r\n    </Table.Cell>\r\n  </Table.Row>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  TextArea,\r\n  Icon,\r\n  Table,\r\n  Label,\r\n  Header\r\n} from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nexport default class Notes extends Component {\r\n  state = {\r\n    todoName: \"\",\r\n    table: []\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let table = JSON.parse(localStorage.getItem(\"tableNotes\"));\r\n\r\n    if (table) this.state.table = table;\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onRemoveTodo = this.onRemoveTodo.bind(this);\r\n    this.onUpdateTodo = this.onUpdateTodo.bind(this);\r\n  }\r\n  onAddTodoForm = event => {\r\n    event.preventDefault();\r\n    this.onAddTodo();\r\n  };\r\n  onAddTodo = () => {\r\n    const { todoName, table } = this.state;\r\n    if (todoName) {\r\n      table.push({ status: 1, name: todoName, date: Date.now() });\r\n      this.setState({ todoName: \"\" });\r\n      this.saveTable(table);\r\n    }\r\n  };\r\n  onRemoveTodo = date => {\r\n    const { table } = this.state;\r\n    let tableNew = table.filter(x => x.date !== date);\r\n    this.saveTable(tableNew);\r\n  };\r\n  onUpdateTodo = date => {\r\n    const { table } = this.state;\r\n\r\n    let index = table.findIndex(x => x.date === date);\r\n    if (table[index].status === 1) table[index].status = 2;\r\n    else table[index].status = 1;\r\n\r\n    this.saveTable(table);\r\n  };\r\n  saveTable = table => {\r\n    this.setState({ table });\r\n    localStorage.setItem(\"tableNotes\", JSON.stringify(table));\r\n  };\r\n\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n  render() {\r\n    const { todoName, table } = this.state;\r\n    return (\r\n      <div>\r\n        <Header>Notes</Header>\r\n        <Form onSubmit={this.onAddTodoForm}>\r\n          <TextArea\r\n            value={todoName}\r\n            name=\"todoName\"\r\n            onChange={this.handleChange}\r\n            icon={\r\n              <Icon\r\n                onClick={() => this.onAddTodo()}\r\n                name=\"add\"\r\n                inverted\r\n                circular\r\n                link\r\n              />\r\n            }\r\n            placeholder=\"Note...\"\r\n          />\r\n          <Button onClick={() => this.onAddTodo()}>Add</Button>\r\n        </Form>\r\n        <Table celled>\r\n          <Table.Body>\r\n            {table.map(({ name, date, status }) => (\r\n              <TableRow\r\n                key={\"row_\" + date}\r\n                name={name}\r\n                date={date}\r\n                status={status}\r\n                onUpdateTodo={this.onUpdateTodo}\r\n                onRemoveTodo={this.onRemoveTodo}\r\n              />\r\n            ))}\r\n          </Table.Body>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst TableStatuses = {\r\n  1: { name: \"Added\", color: \"yellow\" },\r\n  2: { name: \"Completed\", color: \"blue\" }\r\n};\r\n\r\nconst TableRow = ({ name, date, status, onRemoveTodo, onUpdateTodo }) => (\r\n  <Table.Row>\r\n    <Table.Cell collapsing>\r\n      <Label\r\n        as=\"a\"\r\n        basic\r\n        color={TableStatuses[status].color}\r\n        onClick={() => onUpdateTodo(date)}\r\n      >\r\n        {TableStatuses[status].name}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell>{name}</Table.Cell>\r\n    <Table.Cell title={moment(date).fromNow()} collapsing>\r\n      <Label color=\"violet\">\r\n        {moment(date)\r\n          .format(\"DD-MM-YYYY HH:mm\")\r\n          .replace(moment().format(\"DD-MM-YYYY \"), \"\")}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell collapsing>\r\n      <Icon\r\n        onClick={() => onRemoveTodo(date)}\r\n        name=\"remove\"\r\n        inverted\r\n        circular\r\n        link\r\n      />\r\n    </Table.Cell>\r\n  </Table.Row>\r\n);\r\n","import React, { Component } from \"react\";\nimport {\n  Container,\n  Image,\n  Menu\n} from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport logo from \"./logo.svg\";\nimport \"./index.css\";\nimport Tasks from \"./components/Tasks\";\nimport Notes from \"./components/Notes\";\n\nexport default class App extends Component {\n  state = {\n    page: \"tasks\"\n  };\n  onPageChange = page => {\n    this.setState({ page });\n  };\n  render() {\n    const { page } = this.state;\n    return (\n      <div className=\"Site\">\n        <title>React Todo Manager</title>\n        <Menu color={'teal'} fixed=\"top\" inverted>\n          <Container>\n            <Menu.Item as=\"a\" header>\n              <Image size=\"mini\" src={logo} style={{ marginRight: \"1.5em\" }} />\n              React Todo Manager\n            </Menu.Item>\n            <Menu.Item\n              as=\"a\"\n              onClick={() => this.onPageChange(\"tasks\")}\n            >\n              Tasks\n            </Menu.Item>\n            <Menu.Item\n              as=\"a\"\n              onClick={() => this.onPageChange(\"notes\")}\n            >\n              Notes\n            </Menu.Item>\n          </Container>\n        </Menu>\n\n        <Container\n          className=\"Site-content\"\n          text\n          style={{ marginTop: \"7em\", flex: 1 }}\n        >\n          <div>{page === \"tasks\" ? <Tasks /> : <Notes />}</div>\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}