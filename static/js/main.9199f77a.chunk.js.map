{"version":3,"sources":["logo.svg","components/Tasks.js","components/Notes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Tasks","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todoName","table","tableStr","onAddTodoForm","event","preventDefault","onAddTodo","_this$state","push","status","name","date","Date","now","setState","saveTable","onRemoveTodo","tableNew","filter","x","onUpdateTodo","index","findIndex","JSON","stringify","localStorage","setItem","handleScan","data","handleError","err","console","error","parse","getItem","handleChange","bind","assertThisInitialized","defineProperty","target","value","_this2","_this$state2","react_default","a","createElement","Header","onSubmit","Input","onChange","icon","Icon","onClick","inverted","circular","link","fluid","placeholder","Table","celled","Body","map","_ref","Tasks_TableRow","key","style","flex","lib_default","height","width","float","react_qr_reader_lib_default","delay","onError","onScan","Component","TableStatuses","1","color","2","TableRow","_ref2","Row","Cell","collapsing","Label","as","basic","title","moment","fromNow","format","replace","Notes","Form","TextArea","Button","Notes_TableRow","App","page","onPageChange","className","Menu","fixed","Container","Item","header","Image","size","src","logo","marginRight","disabled","Dropdown","item","simple","text","Divider","marginTop","Tasks_Tasks","Notes_Notes","Segment","vertical","margin","backgroundColor","textAlign","List","horizontal","divided","href","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9199f77a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport { Header, Input, Icon, Table, Label } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport QRCode from 'qrcode.react'\r\nimport QrReader from 'react-qr-reader'\r\n\r\n\r\nexport default class Tasks extends Component {\r\n  state = {\r\n    todoName: \"\",\r\n    table: [],\r\n    tableStr:\"\"\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let table = JSON.parse(localStorage.getItem(\"table\"));\r\n\r\n    if (table) this.state.table = table;\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onRemoveTodo = this.onRemoveTodo.bind(this);\r\n    this.onUpdateTodo = this.onUpdateTodo.bind(this);\r\n  }\r\n  onAddTodoForm = event => {\r\n    event.preventDefault();\r\n    this.onAddTodo();\r\n  };\r\n  onAddTodo = () => {\r\n    const { todoName, table } = this.state;\r\n    if (todoName) {\r\n      table.push({ status: 1, name: todoName, date: Date.now() });\r\n      this.setState({ todoName: \"\" });\r\n      this.saveTable(table);\r\n    }\r\n  };\r\n  onRemoveTodo = date => {\r\n    const { table } = this.state;\r\n    let tableNew = table.filter(x => x.date !== date);\r\n    this.saveTable(tableNew);\r\n  };\r\n  onUpdateTodo = date => {\r\n    const { table } = this.state;\r\n\r\n    let index = table.findIndex(x => x.date === date);\r\n    if (table[index].status === 1) table[index].status = 2;\r\n    else table[index].status = 1;\r\n\r\n    this.saveTable(table);\r\n  };\r\n  saveTable = table => {\r\n    const tableStr = JSON.stringify(table);\r\n    this.setState({ table, tableStr });\r\n    localStorage.setItem(\"table\", tableStr);\r\n  };\r\n\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n\r\n  handleScan = data => {\r\n    if (data) {\r\n      this.setState({\r\n        tableStr: data\r\n      })\r\n    }\r\n  }\r\n  handleError = err => {\r\n    console.error(err)\r\n  }\r\n\r\n  render() {\r\n    const { todoName, table, tableStr } = this.state;\r\n    return (\r\n      <div>\r\n\r\n        <Header>Tasks</Header>\r\n        <form onSubmit={this.onAddTodoForm}>\r\n          <Input\r\n            value={todoName}\r\n            name=\"todoName\"\r\n            onChange={this.handleChange}\r\n            icon={\r\n              <Icon\r\n                onClick={() => this.onAddTodo()}\r\n                name=\"add\"\r\n                inverted\r\n                circular\r\n                link\r\n              />\r\n            }\r\n            fluid\r\n            placeholder=\"Todo Name...\"\r\n          />\r\n        </form>\r\n        <Table celled>\r\n          <Table.Body>\r\n            {table.map(({ name, date, status }) => (\r\n              <TableRow\r\n                key={\"row_\" + date}\r\n                name={name}\r\n                date={date}\r\n                status={status}\r\n                onUpdateTodo={this.onUpdateTodo}\r\n                onRemoveTodo={this.onRemoveTodo}\r\n              />\r\n            ))}\r\n          </Table.Body>\r\n        </Table>\r\n        <div style={{flex:1}}>\r\n          <QRCode value={tableStr} \r\n          style={{height:300, width:300, float:\"left\"}}\r\n          />\r\n          <div\r\n          style={{height:300, width:300, float:\"right\"}}\r\n          >\r\n            \r\n          <QrReader\r\n          delay={300}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n          style={{ width: '100%' }}\r\n        />\r\n          </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst TableStatuses = {\r\n  1: { name: \"Added\", color: \"yellow\" },\r\n  2: { name: \"Completed\", color: \"blue\" }\r\n};\r\n\r\nconst TableRow = ({ name, date, status, onRemoveTodo, onUpdateTodo }) => (\r\n  <Table.Row>\r\n    <Table.Cell collapsing>\r\n      <Label\r\n        as=\"a\"\r\n        basic\r\n        color={TableStatuses[status].color}\r\n        onClick={() => onUpdateTodo(date)}\r\n      >\r\n        {TableStatuses[status].name}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell>{name}</Table.Cell>\r\n    <Table.Cell title={moment(date).fromNow()} collapsing>\r\n      <Label color=\"violet\">\r\n        {moment(date)\r\n          .format(\"DD-MM-YYYY HH:mm\")\r\n          .replace(moment().format(\"DD-MM-YYYY \"), \"\")}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell collapsing>\r\n      <Icon\r\n        onClick={() => onRemoveTodo(date)}\r\n        name=\"remove\"\r\n        inverted\r\n        circular\r\n        link\r\n      />\r\n    </Table.Cell>\r\n  </Table.Row>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  TextArea,\r\n  Icon,\r\n  Table,\r\n  Label,\r\n  Header\r\n} from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nexport default class Notes extends Component {\r\n  state = {\r\n    todoName: \"\",\r\n    table: []\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let table = JSON.parse(localStorage.getItem(\"tableNotes\"));\r\n\r\n    if (table) this.state.table = table;\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onRemoveTodo = this.onRemoveTodo.bind(this);\r\n    this.onUpdateTodo = this.onUpdateTodo.bind(this);\r\n  }\r\n  onAddTodoForm = event => {\r\n    event.preventDefault();\r\n    this.onAddTodo();\r\n  };\r\n  onAddTodo = () => {\r\n    const { todoName, table } = this.state;\r\n    if (todoName) {\r\n      table.push({ status: 1, name: todoName, date: Date.now() });\r\n      this.setState({ todoName: \"\" });\r\n      this.saveTable(table);\r\n    }\r\n  };\r\n  onRemoveTodo = date => {\r\n    const { table } = this.state;\r\n    let tableNew = table.filter(x => x.date !== date);\r\n    this.saveTable(tableNew);\r\n  };\r\n  onUpdateTodo = date => {\r\n    const { table } = this.state;\r\n\r\n    let index = table.findIndex(x => x.date === date);\r\n    if (table[index].status === 1) table[index].status = 2;\r\n    else table[index].status = 1;\r\n\r\n    this.saveTable(table);\r\n  };\r\n  saveTable = table => {\r\n    this.setState({ table });\r\n    localStorage.setItem(\"tableNotes\", JSON.stringify(table));\r\n  };\r\n\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n  render() {\r\n    const { todoName, table } = this.state;\r\n    return (\r\n      <div>\r\n        <Header>Notes</Header>\r\n        <Form onSubmit={this.onAddTodoForm}>\r\n          <TextArea\r\n            value={todoName}\r\n            name=\"todoName\"\r\n            onChange={this.handleChange}\r\n            icon={\r\n              <Icon\r\n                onClick={() => this.onAddTodo()}\r\n                name=\"add\"\r\n                inverted\r\n                circular\r\n                link\r\n              />\r\n            }\r\n            placeholder=\"Note...\"\r\n          />\r\n          <Button onClick={() => this.onAddTodo()}>Add</Button>\r\n        </Form>\r\n        <Table celled>\r\n          <Table.Body>\r\n            {table.map(({ name, date, status }) => (\r\n              <TableRow\r\n                key={\"row_\" + date}\r\n                name={name}\r\n                date={date}\r\n                status={status}\r\n                onUpdateTodo={this.onUpdateTodo}\r\n                onRemoveTodo={this.onRemoveTodo}\r\n              />\r\n            ))}\r\n          </Table.Body>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst TableStatuses = {\r\n  1: { name: \"Added\", color: \"yellow\" },\r\n  2: { name: \"Completed\", color: \"blue\" }\r\n};\r\n\r\nconst TableRow = ({ name, date, status, onRemoveTodo, onUpdateTodo }) => (\r\n  <Table.Row>\r\n    <Table.Cell collapsing>\r\n      <Label\r\n        as=\"a\"\r\n        basic\r\n        color={TableStatuses[status].color}\r\n        onClick={() => onUpdateTodo(date)}\r\n      >\r\n        {TableStatuses[status].name}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell>{name}</Table.Cell>\r\n    <Table.Cell title={moment(date).fromNow()} collapsing>\r\n      <Label color=\"violet\">\r\n        {moment(date)\r\n          .format(\"DD-MM-YYYY HH:mm\")\r\n          .replace(moment().format(\"DD-MM-YYYY \"), \"\")}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell collapsing>\r\n      <Icon\r\n        onClick={() => onRemoveTodo(date)}\r\n        name=\"remove\"\r\n        inverted\r\n        circular\r\n        link\r\n      />\r\n    </Table.Cell>\r\n  </Table.Row>\r\n);\r\n","import React, { Component } from \"react\";\nimport {\n  Container,\n  Dropdown,\n  Image,\n  List,\n  Menu,\n  Segment\n} from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport logo from \"./logo.svg\";\nimport \"./index.css\";\nimport Tasks from \"./components/Tasks\";\nimport Notes from \"./components/Notes\";\n\nexport default class App extends Component {\n  state = {\n    page: \"tasks\"\n  };\n  onPageChange = page => {\n    this.setState({ page });\n  };\n  render() {\n    const { page } = this.state;\n    return (\n      <div className=\"Site\">\n        <Menu fixed=\"top\" inverted>\n          <Container>\n            <Menu.Item as=\"a\" header>\n              <Image size=\"mini\" src={logo} style={{ marginRight: \"1.5em\" }} />\n              RTM\n            </Menu.Item>\n            <Menu.Item\n              as=\"a\"\n              onClick={() => this.onPageChange(\"tasks\")}\n              disabled={page === \"tasks\"}\n            >\n              Tasks\n            </Menu.Item>\n            <Menu.Item\n              as=\"a\"\n              onClick={() => this.onPageChange(\"notes\")}\n              disabled={page === \"notes\"}\n            >\n              Notes\n            </Menu.Item>\n\n            <Dropdown item simple text=\"Dropdown\">\n              <Dropdown.Menu>\n                <Dropdown.Item>List Item</Dropdown.Item>\n                <Dropdown.Item>List Item</Dropdown.Item>\n                <Dropdown.Divider />\n                <Dropdown.Header>Header Item</Dropdown.Header>\n                <Dropdown.Item>\n                  <i className=\"dropdown icon\" />\n                  <span className=\"text\">Submenu</span>\n                  <Dropdown.Menu>\n                    <Dropdown.Item>List Item</Dropdown.Item>\n                    <Dropdown.Item>List Item</Dropdown.Item>\n                  </Dropdown.Menu>\n                </Dropdown.Item>\n                <Dropdown.Item>List Item</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </Container>\n        </Menu>\n\n        <Container\n          className=\"Site-content\"\n          text\n          style={{ marginTop: \"7em\", flex: 1 }}\n        >\n          <div>{page === \"tasks\" ? <Tasks /> : <Notes />}</div>\n        </Container>\n\n        <Segment\n          inverted\n          vertical\n          style={{ margin: \"5em 0em 0em\", backgroundColor: \"black\" }}\n        >\n          <Container textAlign=\"center\">\n            <List horizontal inverted divided link size=\"small\">\n              <List.Item as=\"a\" href=\"#\">\n                Site Map\n              </List.Item>\n              <List.Item as=\"a\" href=\"#\">\n                Contact Us\n              </List.Item>\n              <List.Item as=\"a\" href=\"#\">\n                Terms and Conditions\n              </List.Item>\n              <List.Item as=\"a\" href=\"#\">\n                Privacy Policy\n              </List.Item>\n            </List>\n          </Container>\n        </Segment>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}