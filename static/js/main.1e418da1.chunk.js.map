{"version":3,"sources":["logo.svg","components/Tasks.js","components/Notes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","colors","Tasks","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todoName","table","tableStr","qrenabled","searchStatus","category","categories","onAddTodoForm","event","preventDefault","onAddTodo","_this$state","push","status","name","date","Date","now","setState","saveTable","onRemoveTodo","tableNew","filter","x","onUpdateTodo","index","findIndex","JSON","stringify","localStorage","setItem","filterTasks","onAddCategory","_this$state2","color","length","parse","getItem","handleChange","bind","assertThisInitialized","showNotifications","handleClick","n","supported","show","close","target","tag","defineProperty","value","_this2","_this$state3","react_default","a","createElement","build_default","onRef","ref","title","body","moment","fromNow","toLocaleUpperCase","icon","timeout","onClick","Progress","total","success","active","progress","Header","style","cursor","autoComplete","onSubmit","Input","onChange","Icon","inverted","circular","link","fluid","placeholder","Table","celled","Body","sort","y","map","_ref","Tasks_TableRow","key","Component","TableStatuses","1","2","TableRow","_ref2","Row","Cell","collapsing","Label","as","basic","format","replace","Notes","Form","TextArea","Button","Notes_TableRow","App","page","onPageChange","document","className","Menu","fixed","Container","Item","header","Image","size","src","logo","marginRight","text","marginTop","flex","Tasks_Tasks","Notes_Notes","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e418da1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport {\r\n  Header,\r\n  Input,\r\n  Icon,\r\n  Table,\r\n  Label,\r\n  Progress\r\n} from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport ReactNotifications from 'react-browser-notifications';\r\n\r\nconst colors = [\r\n  'red',\r\n  'orange',\r\n  'olive',\r\n  'green',\r\n  'teal',\r\n  'violet',\r\n  'purple',\r\n  'pink',\r\n  'brown',\r\n  'grey',\r\n  'black',\r\n]\r\n\r\nexport default class Tasks extends Component {\r\n  state = {\r\n    todoName: \"\",\r\n    table: [],\r\n    tableStr: \"\",\r\n    qrenabled: false,\r\n    searchStatus: 1,\r\n    category: \"\",\r\n    categories: []\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let table = JSON.parse(localStorage.getItem(\"table\"));\r\n\r\n    if (table) this.state.table = table;\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onRemoveTodo = this.onRemoveTodo.bind(this);\r\n    this.onUpdateTodo = this.onUpdateTodo.bind(this);\r\n\r\n    this.showNotifications = this.showNotifications.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.showNotifications();\r\n  }\r\n  showNotifications() {\r\n    if (this.n.supported()) this.n.show();\r\n  }\r\n\r\n  handleClick(event) {\r\n    // Do something here such as\r\n    // console.log(\"Notification Clicked\") OR\r\n    // window.focus() OR\r\n    // window.open(\"http://www.google.com\")\r\n\r\n    this.n.close(event.target.tag);\r\n  }\r\n\r\n  onAddTodoForm = event => {\r\n    event.preventDefault();\r\n    this.onAddTodo();\r\n  };\r\n  onAddTodo = () => {\r\n    const { todoName, table } = this.state;\r\n    if (todoName) {\r\n      table.push({ status: 1, name: todoName, date: Date.now() });\r\n      this.setState({ todoName: \"\" });\r\n      this.saveTable(table);\r\n    }\r\n  };\r\n  onRemoveTodo = date => {\r\n    const { table } = this.state;\r\n    let tableNew = table.filter(x => x.date !== date);\r\n    this.saveTable(tableNew);\r\n  };\r\n  onUpdateTodo = date => {\r\n    const { table } = this.state;\r\n\r\n    let index = table.findIndex(x => x.date === date);\r\n    if (table[index].status === 1) table[index].status = 2;\r\n    else table[index].status = 1;\r\n\r\n    this.saveTable(table);\r\n  };\r\n  saveTable = table => {\r\n    const tableStr = JSON.stringify(table);\r\n    this.setState({ table, tableStr });\r\n    localStorage.setItem(\"table\", tableStr);\r\n  };\r\n\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n\r\n  filterTasks = (searchStatus) => {\r\n    this.setState({ searchStatus })\r\n  }\r\n\r\n  onAddCategory = event => {\r\n\r\n    event.preventDefault();\r\n\r\n    var { categories, category } = this.state\r\n\r\n    categories.push({ name: category, color: colors[categories.length % colors.length] })\r\n\r\n    this.setState({ categories })\r\n  }\r\n\r\n  render() {\r\n    const { category, todoName, table, searchStatus, categories } = this.state;\r\n    return (\r\n      <div>\r\n        <ReactNotifications\r\n          onRef={ref => (this.n = ref)} // Required\r\n          title={table.filter(x => x.status === searchStatus).length+ \" Tasks !\"} // Required\r\n          body={moment('2019-12-01').fromNow().toLocaleUpperCase()}\r\n          icon=\"icon.png\"\r\n          tag=\"abcdef\"\r\n          timeout=\"5000\"\r\n          onClick={event => this.handleClick(event)}\r\n        />\r\n        <Progress\r\n          total={table.length}\r\n          value={table.filter(x => x.status === 2).length}\r\n          success active progress=\"ratio\" />\r\n        <Header><span style={{ color: searchStatus === 1 ? 'black' : '#eee', cursor: 'pointer' }}\r\n          onClick={() => this.filterTasks(1)}>Tasks ({table.filter(x => x.status === 1).length}) </span>\r\n          <span style={{ color: searchStatus === 2 ? 'black' : '#eee', cursor: 'pointer' }}\r\n            onClick={() => this.filterTasks(2)} > Completed Task ({table.filter(x => x.status === 2).length})</span></Header>\r\n        <form autoComplete=\"off\" onSubmit={this.onAddTodoForm}>\r\n          <Input\r\n            value={todoName}\r\n            name=\"todoName\"\r\n            onChange={this.handleChange}\r\n            icon={\r\n              <Icon\r\n                onClick={() => this.onAddTodo()}\r\n                name=\"add\"\r\n                inverted\r\n                circular\r\n                link\r\n              />\r\n            }\r\n            fluid\r\n            placeholder=\"Todo Name...\"\r\n          />\r\n        </form>\r\n        {/* <form autoComplete=\"off\" style={{ marginTop: 10 }} onSubmit={this.onAddCategory}>\r\n          <Input\r\n            label='Category'\r\n            placeholder='Category Name' value={category}\r\n            onChange={this.handleChange}\r\n            name=\"category\" />\r\n        </form>\r\n        {categories.map(category => <Label\r\n          as=\"a\"\r\n          basic\r\n          color={category.color}\r\n        >\r\n          {category.name}\r\n        </Label>)} */}\r\n        <Table celled>\r\n          <Table.Body>\r\n            {table.filter(x => x.status === searchStatus).sort((x, y) => y.date - x.date).map(({ name, date, status }) => (\r\n              <TableRow\r\n                key={\"row_\" + date}\r\n                name={name}\r\n                date={date}\r\n                status={status}\r\n                onUpdateTodo={this.onUpdateTodo}\r\n                onRemoveTodo={this.onRemoveTodo}\r\n              />\r\n            ))}\r\n          </Table.Body>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst TableStatuses = {\r\n  1: { name: \"Added\", color: \"yellow\" },\r\n  2: { name: \"Completed\", color: \"blue\" }\r\n};\r\n\r\nconst TableRow = ({ name, date, status, onRemoveTodo, onUpdateTodo }) => (\r\n  <Table.Row>\r\n    <Table.Cell collapsing>\r\n      <Label\r\n        as=\"a\"\r\n        basic\r\n        color={TableStatuses[status].color}\r\n        onClick={() => onUpdateTodo(date)}\r\n      >\r\n        {TableStatuses[status].name}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell>{name}</Table.Cell>\r\n    <Table.Cell title={moment(date).fromNow()} collapsing>\r\n      <Label color=\"violet\">\r\n        {moment(date)\r\n          .format(\"DD-MM-YYYY HH:mm\")\r\n          .replace(moment().format(\"DD-MM-YYYY \"), \"\")}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell collapsing>\r\n      <Icon\r\n        onClick={() => onRemoveTodo(date)}\r\n        name=\"remove\"\r\n        inverted\r\n        circular\r\n        link\r\n      />\r\n    </Table.Cell>\r\n  </Table.Row>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  TextArea,\r\n  Icon,\r\n  Table,\r\n  Label,\r\n  Header\r\n} from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport ReactNotifications from 'react-browser-notifications';\r\n\r\nexport default class Notes extends Component {\r\n  state = {\r\n    todoName: \"\",\r\n    table: []\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let table = JSON.parse(localStorage.getItem(\"tableNotes\"));\r\n\r\n    if (table) this.state.table = table;\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onRemoveTodo = this.onRemoveTodo.bind(this);\r\n    this.onUpdateTodo = this.onUpdateTodo.bind(this);\r\n    \r\n    this.showNotifications = this.showNotifications.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n componentDidMount(){\r\n   this.showNotifications();\r\n }\r\n  showNotifications() {\r\n    // If the Notifications API is supported by the browser\r\n    // then show the notification\r\n    if(this.n.supported()) this.n.show();\r\n  }\r\n \r\n  handleClick(event) {\r\n    // Do something here such as\r\n    // console.log(\"Notification Clicked\") OR\r\n    // window.focus() OR\r\n    // window.open(\"http://www.google.com\")\r\n \r\n    // Lastly, Close the notification\r\n    this.n.close(event.target.tag);\r\n  }\r\n\r\n  onAddTodoForm = event => {\r\n    event.preventDefault();\r\n    this.onAddTodo();\r\n  };\r\n  onAddTodo = () => {\r\n    const { todoName, table } = this.state;\r\n    if (todoName) {\r\n      table.push({ status: 1, name: todoName, date: Date.now() });\r\n      this.setState({ todoName: \"\" });\r\n      this.saveTable(table);\r\n    }\r\n  };\r\n  onRemoveTodo = date => {\r\n    const { table } = this.state;\r\n    let tableNew = table.filter(x => x.date !== date);\r\n    this.saveTable(tableNew);\r\n  };\r\n  onUpdateTodo = date => {\r\n    const { table } = this.state;\r\n\r\n    let index = table.findIndex(x => x.date === date);\r\n    if (table[index].status === 1) table[index].status = 2;\r\n    else table[index].status = 1;\r\n\r\n    this.saveTable(table);\r\n  };\r\n  saveTable = table => {\r\n    this.setState({ table });\r\n    localStorage.setItem(\"tableNotes\", JSON.stringify(table));\r\n  };\r\n\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n  render() {\r\n    const { todoName, table } = this.state;\r\n    return (\r\n      <div>\r\n        <Header>Notes</Header>\r\n        <Form onSubmit={this.onAddTodoForm}>\r\n          <TextArea\r\n            value={todoName}\r\n            name=\"todoName\"\r\n            onChange={this.handleChange}\r\n            icon={\r\n              <Icon\r\n                onClick={() => this.onAddTodo()}\r\n                name=\"add\"\r\n                inverted\r\n                circular\r\n                link\r\n              />\r\n            }\r\n            placeholder=\"Note...\"\r\n          />\r\n          <Button onClick={() => this.onAddTodo()}>Add</Button>\r\n        </Form>\r\n        <Table celled>\r\n          <Table.Body>\r\n            {table.map(({ name, date, status }) => (\r\n              <TableRow\r\n                key={\"row_\" + date}\r\n                name={name}\r\n                date={date}\r\n                status={status}\r\n                onUpdateTodo={this.onUpdateTodo}\r\n                onRemoveTodo={this.onRemoveTodo}\r\n              />\r\n            ))}\r\n          </Table.Body>\r\n        </Table>\r\n        <ReactNotifications\r\n          onRef={ref => (this.n = ref)} // Required\r\n          title=\"Hey There!\" // Required\r\n          body=\"This is the body\"\r\n          icon=\"icon.png\"\r\n          tag=\"abcdef\"\r\n          timeout=\"2000\"\r\n          onClick={event => this.handleClick(event)}\r\n        />\r\n \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst TableStatuses = {\r\n  1: { name: \"Added\", color: \"yellow\" },\r\n  2: { name: \"Completed\", color: \"blue\" }\r\n};\r\n\r\nconst TableRow = ({ name, date, status, onRemoveTodo, onUpdateTodo }) => (\r\n  <Table.Row>\r\n    <Table.Cell collapsing>\r\n      <Label\r\n        as=\"a\"\r\n        basic\r\n        color={TableStatuses[status].color}\r\n        onClick={() => onUpdateTodo(date)}\r\n      >\r\n        {TableStatuses[status].name}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell>{name}</Table.Cell>\r\n    <Table.Cell title={moment(date).fromNow()} collapsing>\r\n      <Label color=\"violet\">\r\n        {moment(date)\r\n          .format(\"DD-MM-YYYY HH:mm\")\r\n          .replace(moment().format(\"DD-MM-YYYY \"), \"\")}\r\n      </Label>\r\n    </Table.Cell>\r\n    <Table.Cell collapsing>\r\n      <Icon\r\n        onClick={() => onRemoveTodo(date)}\r\n        name=\"remove\"\r\n        inverted\r\n        circular\r\n        link\r\n      />\r\n    </Table.Cell>\r\n  </Table.Row>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Container,\r\n  Image,\r\n  Menu\r\n} from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./index.css\";\r\nimport Tasks from \"./components/Tasks\";\r\nimport Notes from \"./components/Notes\";\r\n\r\nexport default class App extends Component {\r\n  componentDidMount(){\r\n    document.title=\"React Todo Manager\"\r\n  }\r\n  state = {\r\n    page: \"tasks\"\r\n  };\r\n  onPageChange = page => {\r\n    this.setState({ page });\r\n  };\r\n  render() {\r\n    const { page } = this.state;\r\n    return (\r\n      <div className=\"Site\">\r\n        <title>React Todo Manager</title>\r\n        <Menu color={'teal'} fixed=\"top\" inverted>\r\n          <Container>\r\n            <Menu.Item as=\"a\" header>\r\n              <Image size=\"mini\" src={logo} style={{ marginRight: \"1.5em\" }} />\r\n              React Todo Manager\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              as=\"a\"\r\n              onClick={() => this.onPageChange(\"tasks\")}\r\n            >\r\n              Tasks\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              as=\"a\"\r\n              onClick={() => this.onPageChange(\"notes\")}\r\n            >\r\n              Notes\r\n            </Menu.Item>\r\n          </Container>\r\n        </Menu>\r\n\r\n        <Container\r\n          className=\"Site-content\"\r\n          text\r\n          style={{ marginTop: \"7em\", flex: 1 }}\r\n        >\r\n          <div>{page === \"tasks\" ? <Tasks /> : <Notes />}</div>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}